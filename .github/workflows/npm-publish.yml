name: Publish to NPM

on:
  # 수동 트리거만 사용 (중복 배포 방지)
  workflow_dispatch:
    inputs:
      version:
        description: 'Version type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run TypeScript build
        run: npm run build

      # 빌드된 파일 확인
      - name: Verify build output
        run: |
          ls -la dist/
          echo "Build completed successfully"

  publish:
    needs: test-and-build
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm install

      # 버전 업데이트 (수동 트리거 시)
      - name: Update version
        run: |
          git config --local user.email "zoloman316@gmail.com"
          git config --local user.name "rojojun"
          npm version ${{ github.event.inputs.version }} -m "chore: release v%s"

      # 태그 푸시
      - name: Push changes and tags
        run: |
          git push
          git push --tags

      # .env 파일 생성 (빌드 시 환경 변수 주입용)
      - name: Create .env file
        run: |
          echo "GEMINI_QUEUE_SERVER_API=${{ secrets.GEMINI_API_URL }}" > .env
          echo ".env file created"

      - name: Build package
        run: npm run build

      # package.json에서 버전 읽기
      - name: Get package version
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      # NPM에 배포
      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # GitHub 릴리스 생성
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GITHUB }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false